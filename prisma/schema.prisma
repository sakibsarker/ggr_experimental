generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model profile {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  name       String?
  image      String?
  email      String  @default("")
  password   String?
  orders     order[]
}

model user {
  id           BigInt     @id @default(autoincrement())
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  firstname    String?
  lastname     String?
  image        String?
  email        String    @unique
  password     String?
  orders       order[]
}

model category {
  id         BigInt    @id @default(autoincrement())
  name       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   product[]
}

model product {
  id            BigInt    @id @default(autoincrement())
  title         String
  description   String
  image         String?
  price         Float
  status        String?
  qty           Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      category  @relation(fields: [categoryId], references: [id])
  categoryId    BigInt
  orderItems    orderitem[]
}

model order {
  id           Int         @id @default(autoincrement())
  created_at   DateTime?  @default(now()) @db.Timestamptz(6)
  status       orderstatus
  user         user       @relation(fields: [userId], references: [id])
  userId       BigInt
  orderItems   orderitem[]
  profile      profile?   @relation(fields: [profileId], references: [id])
  profileId    BigInt?
}

enum orderstatus {
  PENDING
  ACCEPTED
  DELIVERED
  REJECTED
}

model orderitem {
  id           Int       @id @default(autoincrement())
  title        String
  image        String?
  name         String
  qty          Int
  order        order     @relation(fields: [orderId], references: [id])
  orderId      Int
  product      product?  @relation(fields: [productId], references: [id])
  productId    BigInt?
}
